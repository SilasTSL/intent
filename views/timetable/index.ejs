<% layout('layouts/boilerplate')%>
<div id="indexPageBody">
<div id="timetableBodyContainer">
    <div id="loadingScreenWrapper">
        <div class="loading">
        </div>
    </div>
    <div id="indexOverlay"></div> 
    <div id="indexHoursFormContainer">
        <h3 class="indexHoursFormTitle">Hours needed:</h3>
        <div class="indexHoursFormButtonRow">
            <div class="indexHoursCancelButton indexHoursButton">Cancel</div>
            <div class="indexHoursSubmitButton indexHoursButton">Submit</div>
        </div>
    </div>

    <div class="timetableHeadingContainer">
        <div class="timetableOptionsContainer">
            <div class="timetableOptionsTopRow">
                <a class="timetablePeriodButton <% if (weekOrMonth == 'week') { %> timetablePeriodButtonSelected <% } %>" href="/timetable/week/today">Week</a>
                <a class="timetablePeriodButton <% if (weekOrMonth == 'month') { %> timetablePeriodButtonSelected <% } %>" href="/timetable/month/today">Month</a>
            </div>
            <div class="timetableWeeklyRow">
                <img class="timetableArrow timetableLeftArrow" src="../../icons/timetable-left-arrow.png" alt="Left weekly timetable arrow icon">
                <div class="timetableWeek" style="<%= weekOrMonth == 'month' ? "font-size: 1.5rem;" : "" %>"><%= formattedPeriod %></div>
                <img class="timetableArrow timetableRightArrow" src="../../icons/timetable-right-arrow.png" alt="Right weekly timetable arrow icon">
            </div>
        </div>
    </div>
    <div class="timetableContainer">
        <% if (weekOrMonth == 'week') { %>
            <div class="timingColumn">
                <% for (let r=8; r <= 23; r++) { %>
                    <div class="timingLabel"><%= r + ":00" %></div>
                <% } %>        
            </div>
            <% var todayDate = new Date(); %>
            <% var todayNum = todayDate.getDay(); %>
            <% const daysOfWeek = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]; %>
            <% var today = daysOfWeek[todayNum == 0 ? 6 : todayNum - 1]; %>
            <% const parts = formattedPeriod.split(" - "); %>
            <% const startOfWeekDate = new Date(parts[0]); %>
            <% const timeDifference = todayDate.getTime() - startOfWeekDate.getTime(); %>
            <% for (let day of daysOfWeek) { %>
                <div class="dayColumn">
                    <p class="dayLabel <%= ((day == today) && (timeDifference > 0) && (timeDifference <= 7 * 24 * 60 * 60 * 1000)) ? 'glowing-text' : '' %>"><%= day %></p>
                    <% const dayDate = new Date(startOfWeekDate.getTime()); %>
                    <% dayDate.setDate(dayDate.getDate() + daysOfWeek.indexOf(day)); %>
                    <% const dayString = `${dayDate.getFullYear()}-${(dayDate.getMonth() + 1).toString().padStart(2, '0')}-${dayDate.getDate().toString().padStart(2, '0')}`; %>
                    <% for (let r=8; r < 23; r++) { %>
                        <% let unitFound = units.find(unit => unit.timings.some(timing => timing.date == dayString && parseInt(timing.timingStart.substring(0, 2)) <= r && parseInt(timing.timingEnd.substring(0, 2)) > r)) %>
                        <% if (unitFound) { %>
                            <% const unitTiming = unitFound.timings.find(timing => (timing.day == day || timing.date == dayString) && parseInt(timing.timingStart.substring(0, 2)) <= r && parseInt(timing.timingEnd.substring(0, 2)) > r) %>
                            <% let unitDuration = parseInt(unitTiming.timingEnd.substring(0, 2)) - parseInt(unitTiming.timingStart.substring(0, 2)); %>
                            <div class="timetableBlock unitBlock <%=unitFound.moduleCode.includes('[TASK]') ? 'unitTaskBlock' : ''%>" unit_code="<%= unitFound.moduleId %>" style="background-color: <%= unitFound.colour %>; height: <%= (50 * unitDuration) + (4 * (unitDuration - 1)) %>px;" >
                                <%= `${unitFound.moduleCode} ${unitFound.type}` %>
                            </div>
                            <% r = parseInt(unitTiming.timingEnd.substring(0, 2)) - 1; %>
                        <% } else { %>
                        <div class="timetableBlock <%= ((day == today) && (timeDifference > 0) && (timeDifference <= 7 * 24 * 60 * 60 * 1000)) ? 'glowingBlock' : '' %>"></div>
                        <% } %>
                    <% } %>
                </div>
            <% } %>
        <% } else if (weekOrMonth == 'month') { %>
            <% 
                // Helper functions for month display:
                function getDaysInMonth(formattedPeriod) {
                    const monthNames = [
                        "January", "February", "March", "April", "May", "June",
                        "July", "August", "September", "October", "November", "December"
                    ];
                    const month = formattedPeriod.split(' ')[0];
                    const monthIndex = monthNames.findIndex(m => m === month);
                    const date = new Date(2023, monthIndex + 1, 0);
                    return date.getDate();
                }
            
                function getStartingDay(formattedPeriod) {
                    const monthNames = [
                        "January", "February", "March", "April", "May", "June",
                        "July", "August", "September", "October", "November", "December"
                    ];
                    const month = formattedPeriod.split(' ')[0];
                    const year = formattedPeriod.split(' ')[1];
                                
                    const monthIndex = monthNames.findIndex(m => m === month);
                    const date = new Date(year, monthIndex, 1);
                    const startingDay = date.getDay();
                                
                    return (startingDay + 6) % 7 + 1;
                }

                function getPreviousMonth() {
                    const monthNames = [
                        "January", "February", "March", "April", "May", "June",
                        "July", "August", "September", "October", "November", "December"
                    ];
                    const currentMonth = formattedPeriod.split(' ')[0];
                    const currentMonthIndex = monthNames.indexOf(currentMonth);
                    const previousMonthIndex = (currentMonthIndex + 11) % 12;
                    return monthNames[previousMonthIndex];
                }
            
                function getDayNumber(column, row, startingDay, daysInMonth) {
                    const emptyCells = startingDay;
                    const currentCell = column + row * 7;
                    const dayNumber = currentCell - emptyCells + 1;
            
                    if (dayNumber > 0 && dayNumber <= daysInMonth) {
                        return dayNumber;
                    } else if (dayNumber <= 0) {
                        const prevMonthDays = getDaysInMonth(getPreviousMonth());
                        return -(prevMonthDays + dayNumber);
                    } else {
                        return -(dayNumber - daysInMonth);
                    }
                }
            %>
            
            <div class="monthContainer">
                <% const daysOfWeekMonthly = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]; %>
                <% const monthNames = [
                    "January", "February", "March", "April", "May", "June",
                    "July", "August", "September", "October", "November", "December"
                    ]; %>
                <% const daysInMonth = getDaysInMonth(formattedPeriod); %>
                <% const startingDay = getStartingDay(formattedPeriod); %>
                <% const year = formattedPeriod.split(' ')[1]; %>
                <% const currentMonth = formattedPeriod.split(' ')[0]; %>
                <% const currentMonthIndex = monthNames.indexOf(currentMonth); %>
                
                <% for (let c = 0; c < 7; c++) { %>
                    <div class="monthColumn">
                        <h4 class="monthHeader"><%= daysOfWeekMonthly[c] %></h4>
                        <% for (let r = 0; r < 6; r++) { %>
                            <% const dayNumber = getDayNumber(c, r, startingDay, daysInMonth); %>
                            <% 
                                const parts = formattedPeriod.split(' ');
                                const year = parts[1];
                                let month = monthNames.indexOf(parts[0]);
                                if (dayNumber < 0) {
                                    if (Math.abs(dayNumber) > 15) {
                                        month -= 1;
                                        if (month < 0) {
                                            month = 11;
                                        }
                                    } else {
                                        month += 1;
                                        if (month > 11) {
                                            month = 0;
                                        }
                                    }
                                }
                                const dayDateString = `${year}-${(month+1).toString().padStart(2, '0')}-${Math.abs(dayNumber).toString().padStart(2, '0')}`;
                                const unitsToday = units.reduce((result, unit) => {
                                    let timings = [];
                                    timings = unit.timings.filter(timing => timing.date == dayDateString);
                                    
                                    if (timings.length > 0) {
                                        timings.forEach(timing => {
                                            result.push({
                                            _id: unit._id,
                                            moduleCode: unit.moduleCode,
                                            type: unit.type,
                                            timing: { timingStart: timing.timingStart, timingEnd: timing.timingEnd },
                                            colour: unit.colour
                                            });
                                        });
                                    }
                                    return result;
                                }, []);
                            %>
                            <div class="monthDay <%= dayNumber < 0 ? 'notCurrentMonthDay' : '' %> <%= dayDateString == new Date().toISOString().substring(0, 10) ? 'monthDayToday' : ''%>">
                                <div class="notCurrentMonthDayOverlay"></div>
                                <div class="monthDayTopRow">
                                    <%= Math.abs(dayNumber) %>
                                </div>
                                <div class="monthDayBottomRow">
                                    <% for (let unitFound of unitsToday) { %>
                                        <div class="monthDayUnit" unit-title="<%= `${unitFound.moduleCode} ${unitFound.type}` %>" unit-timing="<%= unitFound.timing.timingStart + ' - ' + unitFound.timing.timingEnd %>" style="background-color: <%= unitFound.colour %>;"  ></div>
                                    <% } %>
                                </div>
                            </div>
                        <% } %>
                    </div>
                <% } %>
                <div id="monthlyUnitPopup">
                    <h3 class="monthlyUnitPopupTitle"></h3>
                    <p class="monthlyUnitPopupTiming"></p>
                </div>
            </div>
        <% } %>
    </div>
</div>
<div class="indexSideContainer">
    <div class="nusModsFormContainer">
        <h2 class="nusModsFormTitle">Use your NUSMods Link here</h2>
        <p class="nusModsFormDescription">Simply fill in your timetable in NUSMods and click Share/Sync, then paste your timetable's link here!</p>
        <div class="nusModsFormInputRow">
            <input id="nusModsFormInput" class="nusModsFormInput" type="text">
            <div id="nusModsFormSubmitButton" class="nusModsFormSubmitButton button">Import</div>
        </div>      
    </div>
    <hr class="indexFormBorder">
    <h2 class="indexListHeader">TODAY</h2>
    <div class="indexListContainer">
        <% var todayDate = new Date() %>
        <% var todayDateString = `${todayDate.getFullYear()}-${(todayDate.getMonth() + 1).toString().padStart(2, '0')}-${todayDate.getDate().toString().padStart(2, '0')}`; %>
        <% var todayNum = todayDate.getDay(); %>
        <% const daysOfWeek = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]; %>
        <% var today = daysOfWeek[todayNum == 0 ? 6 : todayNum - 1]; %>
        <% const todaysUnits = units.reduce((result, unit) => {
            let timings = [];
            timings = unit.timings.filter(timing => timing.date === todayDateString);
            
            if (timings.length > 0) {
                timings.forEach(timing => {
                    result.push({
                    _id: unit._id,
                    moduleCode: unit.moduleCode,
                    type: unit.type,
                    title: unit.title,
                    timing: { timingStart: timing.timingStart, timingEnd: timing.timingEnd },
                    colour: unit.colour
                    });
                });
            }
            return result;
        }, []); %>
        <% todaysUnits.sort((a, b) => a.timing.timingStart - b.timing.timingStart); %>
        <% for (let unit of todaysUnits) { %>
            <div class="indexListUnit" style="background-color: <%= unit.colour %>;" ><%= unit.moduleCode %> <%= unit.type %> at <%= unit.timing.timingStart %> - <%= unit.timing.timingEnd %></div>
        <% } %>
    </div>
</div>
</div>

<script>
    // Make same lesson cells hover the same:
    const cells = document.querySelectorAll(".unitBlock");
    cells.forEach(cell => {
        cell.addEventListener('mouseover', () => {
            const sameUnitCells = document.querySelectorAll(`[unit_code="${cell.getAttribute('unit_code')}"]`);
            for (const sameUnitCell of sameUnitCells) {
                sameUnitCell.classList.add('unitBlockHovered');
            }
        })
        cell.addEventListener('mouseout', function() {
            const sameUnitCells = document.querySelectorAll(`[unit_code="${cell.getAttribute('unit_code')}"]`);
            for (const sameUnitCell of sameUnitCells) {
                sameUnitCell.classList.remove('unitBlockHovered');
            }
        });
    });

    // Loading screen functions:
    function showLoadingScreen() {
        document.getElementById('loadingScreenWrapper').style.display = 'flex';
    }

    function hideLoadingScreen() {
        document.getElementById('loadingScreenWrapper').style.display = 'none';
    }

    // NUSMods Import Submit:
    const nusModsImportSubmitButton = document.getElementById('nusModsFormSubmitButton');

    function getNthWeekdayOfMonth(year, month, weekday, nth) {
        const firstDayOfMonth = new Date(year, month, 1);
        const dayOffset = (weekday - firstDayOfMonth.getDay() + 7) % 7;
        const targetDay = 1 + (nth - 1) * 7 + dayOffset;
        return new Date(year, month, targetDay);
    }
    function getCurrentSemesterStartDate() {
        const currentDate = new Date();
        const currentYear = currentDate.getFullYear();
        const currentMonth = currentDate.getMonth();
        const currentDay = currentDate.getDate();

        if ((currentMonth > 5 && currentMonth < 11) ||
            (currentMonth === 5 && currentDay >= 16) ||
            (currentMonth === 11 && currentDay <= 15)) {
            // First semester, which starts in August
            return [1, getNthWeekdayOfMonth(currentYear, 7, 1, 2)];
        } else {
            // Second semester, which starts in January
            return [2, getNthWeekdayOfMonth(currentYear, 0, 1, 2)];
        }
    }
    
    const currentSem = getCurrentSemesterStartDate()[0];
    const semesterStartDate = getCurrentSemesterStartDate()[1];
    console.log("Start date of current semester:", semesterStartDate.toDateString());

    function addWeeksToDate(date, weeks) {
        const millisecondsPerWeek = 7 * 24 * 60 * 60 * 1000;
        const targetTimestamp = date.getTime() + (millisecondsPerWeek * weeks);
        return new Date(targetTimestamp);
    }
    function getXDayOfWeekInSameWeek(date, xDay) {
        const dayOfWeek = date.getDay(); // 0 (Sunday) to 6 (Saturday)
        const difference = xDay - dayOfWeek;
        const newXDay = new Date(date);
        newXDay.setDate(newXDay.getDate() + difference);
        const year = newXDay.getFullYear();
        const month = String(newXDay.getMonth() + 1).padStart(2, '0');
        const day = String(newXDay.getDate()).padStart(2, '0');

        const dateString = `${year}-${month}-${day}`;
        return dateString;
    }


    function createIndexHourInputContainer(units) {
        const inputContainer = document.createElement('div');
        inputContainer.classList.add('indexHourInputModuleContainer');
        let inputContainerHoursContainers = '';
        for (let unit of units) {
            const type = unit.type;
            const id = `${unit.moduleCode} ${type}`
            inputContainerHoursContainers += `
            <div class="indexHoursFormInputLabelContainer">
                <label for="${id}" class="indexHoursFormIndividualLabel">${unit.type}: </label>
                <input id='${id}' type="number" class="indexHoursFormIndividualInput">
            </div>
            `
            console.log(inputContainerHoursContainers)
        }
        inputContainerBody = `
        <div class="indexHoursFormIndividualInputContainer">
            <h4 class="indexHoursFormInputRowTitle">${units[0].moduleCode}</h4>
            <div class="indexHoursFormInputUnitsContainer">
                ${inputContainerHoursContainers}
            </div>
        </div>
        `
        inputContainer.innerHTML = inputContainerBody;
        return inputContainer;
    }

    nusModsImportSubmitButton.addEventListener('click', async () => {

        // Ask if confirm delete all other lessons:
        if (!confirm('Are you sure you want to import your NUSMods Timetable? (This will delete all your existing module and assignments)')) {
            return;
        }

        const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

        const lessonTypeMapping = {
            'SEC': 'Sectional Teaching',
            'LAB': 'Laboratory',
            'TUT': 'Tutorial',
            'LEC': 'Lecture',
            'REC': 'Recitation'
        }
        try {
            showLoadingScreen();
            const nusModsFormInput = document.getElementById('nusModsFormInput');
            const nusModsUrl = nusModsFormInput.value;

            // Parse information into units from url: (Example url: https://nusmods.com/timetable/sem-2/share?CM2122=TUT:2,LAB:1,LEC:1&CS1101S=TUT:06,REC:02,LEC:1&CS2040S=LEC:1,REC:09,TUT:13)
            const unparsedString = nusModsUrl.split('?')[1];
            const listOfModules = unparsedString.split('&');

            const newModules = [];

            for (let module of listOfModules) { // CS1101S=TUT:06,REC:02,LEC:1
                const moduleDetailList = module.split('=');
                const moduleCode = moduleDetailList[0];

                const moduleClassList = moduleDetailList[1].split(',');
                const response = await fetch(`https://api.nusmods.com/v2/2023-2024/modules/${moduleCode}.json`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const responseJson = await response.json();
                const moduleTimetable = responseJson['semesterData'][currentSem - 1]['timetable'];

                let units = [];
                for (let classInfo of moduleClassList) { // TUT:06
                    const classSplit = classInfo.split(':');
                    const unitType = classSplit[0]; // TUT
                    const unitClass = classSplit[1]; // 06
                    const unitTypeFull = lessonTypeMapping[unitType];
                    const timingList = moduleTimetable.filter(time => (time['classNo'] == unitClass) && (time['lessonType'] == unitTypeFull));
                    // Each unit list add as new timing
                    const unitTimings = [];

                    for (let timing of timingList) {
                        const timingStart = timing['startTime'];
                        const timingEnd = timing['endTime'];
                        const dates = [];
                        for (let week of timing['weeks']) {
                            const mondayOfWeek = addWeeksToDate(semesterStartDate, week - 1);
                            const date = getXDayOfWeekInSameWeek(mondayOfWeek, daysOfWeek.indexOf(timing['day']));
                            dates.push(date);
                        }
                        for (let date of dates) {
                            unitTimings.push({
                                timingStart: timingStart,
                                timingEnd: timingEnd,
                                date: date,
                                day: timing['day']
                            })
                        }
                    }
                    units.push({
                        moduleCode: moduleCode,
                        class: unitClass,
                        type: unitType,
                        timings: unitTimings
                    })
                }
                newModules.push({
                    code: moduleCode,
                    units: units
                })
            }


            // Append unit information into requestBody:
            const requestBody = new URLSearchParams();
            requestBody.append('newModules', JSON.stringify(newModules));

            // Post request to add units:
            fetch('/nus-mods', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: requestBody.toString()
            })
            .then(data => {
                document.getElementById("indexOverlay").style.display = 'block';

                // Open form to get hours taken for each unit:
                const indexFormInputContainer = document.getElementById('indexHoursFormContainer');
                const indexFormButtonRow = document.getElementsByClassName('indexHoursFormButtonRow')[0];
                indexFormInputContainer.style.display = 'flex';
                hideLoadingScreen();

                for (let module of newModules) {
                    const nonLectureUnits = module.units.filter(unit => unit.type != 'LEC');
                    if (nonLectureUnits.length <= 0) {
                        continue;
                    }
                    indexFormButtonRow.parentNode.insertBefore(createIndexHourInputContainer(nonLectureUnits), indexFormButtonRow);
                }
            })
            .catch(err => {
                alert("There was a problem importing your NUSMods timetable!");
                console.log(err)
                hideLoadingScreen();
            })
        } catch (error) {
            console.log(error);
            alert("There was a problem importing your NUSMods Timetable!");
            hideLoadingScreen();
        }
    })

    // Onclick for arrow buttons:
    const weekOrMonth = "<%= weekOrMonth %>";
    const period = "<%= formattedPeriod %>";

    const leftArrowButton = document.getElementsByClassName('timetableLeftArrow')[0];
    const rightArrowButton = document.getElementsByClassName('timetableRightArrow')[0];

    function getPreviousWeek(dateRange) {
        const parts = dateRange.split(" - ");
        const startDate = new Date(parts[0]);
        const endDate = new Date(parts[1]);

        const previousWeekStartDate = new Date(startDate);
        previousWeekStartDate.setDate(startDate.getDate() - 7);
        const previousWeekEndDate = new Date(endDate);
        previousWeekEndDate.setDate(endDate.getDate() - 7);

        return (
            previousWeekStartDate.toLocaleDateString("en", {
            month: "long",
            day: "numeric",
            year: "numeric",
            }) +
            " - " +
            previousWeekEndDate.toLocaleDateString("en", {
            month: "long",
            day: "numeric",
            year: "numeric",
            })
        );
        }

    function getNextWeek(dateRange) {
        const parts = dateRange.split(" - ");
        const startDate = new Date(parts[0]);
        const endDate = new Date(parts[1]);

        const nextWeekStartDate = new Date(startDate);
        nextWeekStartDate.setDate(startDate.getDate() + 7);
        const nextWeekEndDate = new Date(endDate);
        nextWeekEndDate.setDate(endDate.getDate() + 7);

        return (
            nextWeekStartDate.toLocaleDateString("en", {
            month: "long",
            day: "numeric",
            year: "numeric",
            }) +
            " - " +
            nextWeekEndDate.toLocaleDateString("en", {
            month: "long",
            day: "numeric",
            year: "numeric",
            })
        );
    }

    function getNextMonth(currentMonthYear) {
        const [month, year] = currentMonthYear.split(' ');
        const date = new Date(`${month} 1, ${year}`);
        date.setMonth(date.getMonth() + 1);
        const nextMonth = date.toLocaleString('default', { month: 'long' });
        const nextYear = date.getFullYear();
        return `${nextMonth} ${nextYear}`;
    }

    function getPreviousMonthFromMonthYear(currentMonthYear) {
        const [month, year] = currentMonthYear.split(' ');
        const date = new Date(`${month} 1, ${year}`);
        date.setMonth(date.getMonth() - 1);
        const previousMonth = date.toLocaleString('default', { month: 'long' });
        const previousYear = date.getFullYear();
        return `${previousMonth} ${previousYear}`;
    }

    let previousPeriod = "";
    let nextPeriod = "";
    if (weekOrMonth == 'week') {
        nextPeriod = getNextWeek(period);
        previousPeriod = getPreviousWeek(period);
    } else {
        nextPeriod = getNextMonth(period);
        previousPeriod = getPreviousMonthFromMonthYear(period);
    }

    leftArrowButton.addEventListener('click', () => {
        window.location.href = `/timetable/${weekOrMonth}/${previousPeriod}`;
    })
    rightArrowButton.addEventListener('click', () => {
        window.location.href = `/timetable/${weekOrMonth}/${nextPeriod}`;
    })


    // Edit functionality:
    let timingIndex = 0;
    const colourList = ["", "#C62828", "#1565C0", "#2E7D32", "#FFA000", "#6A1B9A", "#F08731"];
    const dayList = ["", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
    const timingsList = ["", "0800", "0900", "1000", "1100", "1200", "1300", "1400", "1500", "1600", "1700", "1800", "1900", "2000", "2100", "2200", "2300"];

    // Delete button onclick:
    function deleteOnclick(unitId) {
        const deleteUrl = `/timetable/${unitId}`;
        fetch(deleteUrl, {
            method: 'DELETE',
        })
        .then(response => {
            window.location.href = '/timetable/week/today';
        })
        .catch(err => {
            alert("There was a problem deleting this lesson/task/assignment!");
        }) 
    }


    // Monthly hover item functions:
    const monthlyUnits = document.getElementsByClassName('monthDayUnit');
    const monthlyUnitPopup = document.getElementById('monthlyUnitPopup');

    for (let monthlyUnit of monthlyUnits) {
        monthlyUnit.addEventListener('mouseenter', function(e) {
            monthlyUnitPopup.style.display = 'block';
            monthlyUnitPopup.style.backgroundColor = monthlyUnit.style.backgroundColor;
            const title = monthlyUnit.getAttribute('unit-title');
            const timing = monthlyUnit.getAttribute('unit-timing');
            monthlyUnitPopup.innerHTML = `${title} from ${timing}`;
            updatePopupPosition(e);
        });

        monthlyUnit.addEventListener('mousemove', function(e) {
            updatePopupPosition(e);
        });

        monthlyUnit.addEventListener('mouseleave', function() {
            monthlyUnitPopup.style.display = 'none';
        });
    }


    function updatePopupPosition(e) {
        const offsetX = 10; // Adjust the X offset as needed
        const offsetY = 10; // Adjust the Y offset as needed

        const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

        monthlyUnitPopup.style.left = e.pageX - scrollLeft + offsetX + 'px';
        monthlyUnitPopup.style.top = e.pageY - scrollTop + offsetY + 'px';
    }

    // Hours Cancel Button
    document.getElementsByClassName('indexHoursCancelButton')[0].addEventListener('click', () => {
        if (confirm('Are you sure you do not want to assign any time for completing your work?')) {
            document.getElementById('indexHoursFormContainer').style.display = 'none';
            document.getElementById('indexOverlay').style.display = 'none';
            document.getElementById('nusModsFormInput').value = '';
        }
    })

    // Hours Submit Button
    document.getElementsByClassName('indexHoursSubmitButton')[0].addEventListener('click', () => {
        showLoadingScreen();
        const taskInputs = document.getElementsByClassName('indexHoursFormIndividualInput');
        
        const tasksList = [];
        for (let input of taskInputs) {
            tasksList.push({
                moduleCode: input.id.split(' ')[0],
                type: input.id.split(' ')[1],
                hours: input.value
            });
        }
        console.log('Tasks:')
        console.log(tasksList);

        Array.from(document.getElementsByClassName('indexHoursFormIndividualInput')).map(element => element.value = '');
        document.getElementById('indexHoursFormContainer').style.display = 'none';
        document.getElementById('indexOverlay').style.display = 'none';


        const requestBody = new URLSearchParams();
        requestBody.append('hours', JSON.stringify(tasksList));
        requestBody.append('semStartDate', semesterStartDate.toDateString());
        fetch('/optimise', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: requestBody.toString()
        })
        .then(res => {
            hideLoadingScreen();
            window.location.href = '/timetable/week/today';
        })
        .catch(err => {
            alert("Something went wrong with optimising your schedule!");
            hideLoadingScreen();
        })
    });
</script>

