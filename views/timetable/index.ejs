<% layout('layouts/boilerplate')%>
<div id="indexPageBody">
<div id="timetableBodyContainer">
    <div class="timetableHeadingContainer">
        <h1 class="timetableTitle">Timetable</h1>
        <div class="timetableOptionsContainer">
            <div class="timetableOptionsTopRow">
                <a class="timetablePeriodButton <% if (weekOrMonth == 'week') { %> timetablePeriodButtonSelected <% } %>" href="/timetable/week/today">Week</a>
                <a class="timetablePeriodButton <% if (weekOrMonth == 'month') { %> timetablePeriodButtonSelected <% } %>" href="/timetable/month/today">Month</a>
            </div>
            <div class="timetableWeeklyRow">
                <img class="timetableArrow timetableLeftArrow" src="../../icons/timetable-left-arrow.png" alt="Left weekly timetable arrow icon">
                <div class="timetableWeek" style="<%= weekOrMonth == 'month' ? "font-size: 1.5rem;" : "" %>"><%= formattedPeriod %></div>
                <img class="timetableArrow timetableRightArrow" src="../../icons/timetable-right-arrow.png" alt="Right weekly timetable arrow icon">
            </div>
        </div>
    </div>
    <div class="timetableContainer">
        <% if (weekOrMonth == 'week') { %>
        <div class="timingColumn">
            <% for (let r=8; r <= 18; r++) { %>
                <div class="timingLabel"><%= r + ":00" %></div>
            <% } %>        
        </div>
        <% const daysOfWeek = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]; %>
        <% for (let day of daysOfWeek) { %>
            <div class="dayColumn">
                <p class="dayLabel"><%= day %></p>
                <% for (let r=8; r < 18; r++) { %>
                    <% let unitFound = units.find(unit => unit.timings.some(timing => timing.day == day && parseInt(timing.timingStart.substring(0, 2)) <= r && parseInt(timing.timingEnd.substring(0, 2)) > r)) %>
                    <% if (unitFound) { %>
                        <% const unitTiming = unitFound.timings.find(timing => timing.day == day && parseInt(timing.timingStart.substring(0, 2)) <= r && parseInt(timing.timingEnd.substring(0, 2)) > r) %>
                        <% let unitDuration = parseInt(unitTiming.timingEnd.substring(0, 2)) - parseInt(unitTiming.timingStart.substring(0, 2)); %>
                        <div class="timetableBlock unitBlock" unit_id="<%= unitFound._id %>" style="background-color: <%= unitFound.colour %>; height: <%= (55 * unitDuration) + (4 * (unitDuration - 1)) %>px;" <% if (unitFound.type == "Lesson") { %> onclick="window.location.href = '/edit/<%= unitFound._id %>/lesson'" <% } else { %> onclick="window.location.href = '/edit/<%= unitFound._id %>/weekly-tasks'" <% } %>>
                            <%= unitFound.title %>
                        </div>
                        <% r = parseInt(unitTiming.timingEnd.substring(0, 2)) - 1; %>
                    <% } else { %>
                    <div class="timetableBlock"></div>
                    <% } %>
                <% } %>
            </div>
        <% } %>
        <% } else if (weekOrMonth == 'month') { %>

        <% } %>
    </div>
</div>
</div>

<script>
    // Make same lesson cells hover the same:
    const cells = document.querySelectorAll(".unitBlock");
    cells.forEach(cell => {
        cell.addEventListener('mouseover', () => {
            const sameUnitCells = document.querySelectorAll(`[unit_id="${cell.getAttribute('unit_id')}"]`);
            for (const sameUnitCell of sameUnitCells) {
                sameUnitCell.style.opacity = 0.8;
                sameUnitCell.style.transform = 'scale(1.04)';
            }
        })
        cell.addEventListener('mouseout', function() {
            const sameUnitCells = document.querySelectorAll(`[unit_id="${cell.getAttribute('unit_id')}"]`);
            for (const sameUnitCell of sameUnitCells) {
                sameUnitCell.style.opacity = 1;
                sameUnitCell.style.transform = 'scale(1)';
            }
        });
    });

    // Onclick for arrow buttons:
    const weekOrMonth = "<%= weekOrMonth %>";
    const period = "<%= formattedPeriod %>";

    const leftArrowButton = document.getElementsByClassName('timetableLeftArrow')[0];
    const rightArrowButton = document.getElementsByClassName('timetableRightArrow')[0];

    function getPreviousWeek(dateRange) {
        const parts = dateRange.split(" - ");
        const startDate = new Date(parts[0]);
        const endDate = new Date(parts[1]);

        const previousWeekStartDate = new Date(startDate);
        previousWeekStartDate.setDate(startDate.getDate() - 7);
        const previousWeekEndDate = new Date(endDate);
        previousWeekEndDate.setDate(endDate.getDate() - 7);

        return (
            previousWeekStartDate.toLocaleDateString("en", {
            month: "long",
            day: "numeric",
            year: "numeric",
            }) +
            " - " +
            previousWeekEndDate.toLocaleDateString("en", {
            month: "long",
            day: "numeric",
            year: "numeric",
            })
        );
        }

    function getNextWeek(dateRange) {
        const parts = dateRange.split(" - ");
        const startDate = new Date(parts[0]);
        const endDate = new Date(parts[1]);

        const nextWeekStartDate = new Date(startDate);
        nextWeekStartDate.setDate(startDate.getDate() + 7);
        const nextWeekEndDate = new Date(endDate);
        nextWeekEndDate.setDate(endDate.getDate() + 7);

        return (
            nextWeekStartDate.toLocaleDateString("en", {
            month: "long",
            day: "numeric",
            year: "numeric",
            }) +
            " - " +
            nextWeekEndDate.toLocaleDateString("en", {
            month: "long",
            day: "numeric",
            year: "numeric",
            })
        );
    }

    function getNextMonth(currentMonth) {
        const currentDate = new Date(`1 ${currentMonth}`);
        currentDate.setMonth(currentDate.getMonth() + 1);
        return currentDate.toLocaleString('default', { month: 'long' });
    }

    function getPreviousMonth(currentMonth) {
        const currentDate = new Date(`1 ${currentMonth}`);
        currentDate.setMonth(currentDate.getMonth() - 1);
        return currentDate.toLocaleString('default', { month: 'long' });
    }

    let previousPeriod = "";
    let nextPeriod = "";
    if (weekOrMonth == 'week') {
        nextPeriod = getNextWeek(period);
        previousPeriod = getPreviousWeek(period);
    } else {
        nextPeriod = getNextMonth(period);
        previousPeriod = getPreviousMonth(period);
    }

    leftArrowButton.addEventListener('click', () => {
        window.location.href = `/timetable/${weekOrMonth}/${previousPeriod}`;
    })
    rightArrowButton.addEventListener('click', () => {
        window.location.href = `/timetable/${weekOrMonth}/${nextPeriod}`;
    })

</script>

