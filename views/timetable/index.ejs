<% layout('layouts/boilerplate')%>
<div id="indexPageBody">
<div id="timetableBodyContainer">
    <div id="loadingScreenWrapper">
        <div class="loading">
        </div>
    </div>
    <div id="indexOverlay"></div>
    <div id="indexEditLessonContainer" class="indexEditContainer">
        <h3 class="indexEditLessonContainerTitle">Edit Lesson:</h3>
        <div class="editInputRow">
            <label class="form-label" for="editLessonTitle">Title</label>
            <input class="form-control" type="text" id="editLessonTitle" required>
        </div>
        <div class="editInputRow">
            <label class="form-label" for="editLessonColour">Colour</label>
            <select class="form-select" id="editLessonColour" name="lesson[colour]" required>
                <option class="" value="" selected disabled>Select a colour</option>
                <option class="Red" value="#C62828">Red</option>
                <option class="Blue" value="#1565C0">Blue</option>
                <option class="Green" value="#2E7D32">Green</option>
                <option class="Yellow" value="#FFA000">Yellow</option>
                <option class="Purple" value="#6A1B9A">Purple</option>
                <option class="Orange" value="#F08731">Orange</option>
            </select>
        </div>
        <div class="editInputRow" id="editLessonTimingContainer">
            <div class="editNewLessonTimingRow editTimingRow">
                <div class="indexTimingColumn">
                    <label class="form-label" for="editLessonNewDay">Day</label>
                    <select class="form-select" id="editLessonNewDay" onchange="handleEditLessonDayChange(this)" required>
                        <option value="" selected disabled>Select a day</option>
                        <option value="Monday">Monday</option>
                        <option value="Tuesday">Tuesday</option>
                        <option value="Wednesday">Wednesday</option>
                        <option value="Thursday">Thursday</option>
                        <option value="Friday">Friday</option>
                        <option value="Saturday">Saturday</option>
                        <option value="Sunday">Sunday</option>
                    </select>            
                </div>
                <div class="indexTimingColumn">
                    <label class="form-label" for="editLessonNewTimingStart">Start</label>
                    <select class="form-select" id="editLessonNewTimingStart" onchange="handleEditLessonStartChange(this)" disabled required>
                        <option value="" selected disabled>Select a starting time</option>
                        <% for (let j = 8; j <= 18; j++) { %>
                            <% let time = j < 10 ? '0' + j : j; %>
                            <option value="<%= time %>00"><%= time %>:00</option>
                        <% } %>
                    </select>
                </div>
                <div class="indexTimingColumn">
                    <label class="form-label" for="editLessonNewTimingEnd">End</label>
                    <select class="form-select" id="editLessonNewTimingEnd" onchange="handleEditLessonEndChange(this)" disabled required>
                        <option value="" selected disabled>Select an ending time</option>
                        <% for (let j = 8; j <= 18; j++) { %>
                            <% let time = j < 10 ? '0' + j : j; %>
                            <option value="<%= time %>00"><%= time %>:00</option>
                        <% } %>
                    </select>
                </div>
            </div>Æ’
        </div>

        <div class="indexEditButtonsRow">
            <div class="indexEditCancelButton button" onclick="hideEditLessonContainer()">Cancel</div>
            <div class="indexEditDeleteButton button">Delete</div>
            <div class="indexEditSubmitButton button" id="indexEditLessonSubmitButton">Submit</div>
        </div>
    </div>

    <div id="indexEditTaskContainer" class="indexEditContainer">
        <h3 class="indexEditTaskTitle">Edit Task:</h3>
        <div class="editInputRow">
            <label class="form-label" for="editTaskTitle">Title</label>
            <input class="form-control" type="text" id="editTaskTitle" required>
        </div>
        <div class="editInputRow" id="editTaskTimingContainer">
            <div class="editNewTaskTimingRow editTimingRow">
                <div class="indexTimingColumn">
                    <label class="form-label" for="editTaskNewDay">Day</label>
                    <select class="form-select" id="editTaskNewDay" onchange="handleEditTaskDayChange(this)" required>
                        <option value="" selected disabled>Select a day</option>
                        <option value="Monday">Monday</option>
                        <option value="Tuesday">Tuesday</option>
                        <option value="Wednesday">Wednesday</option>
                        <option value="Thursday">Thursday</option>
                        <option value="Friday">Friday</option>
                        <option value="Saturday">Saturday</option>
                        <option value="Sunday">Sunday</option>
                    </select>            
                </div>
                <div class="indexTimingColumn">
                    <label class="form-label" for="editTaskNewTimingStart">Start</label>
                    <select class="form-select" id="editTaskNewTimingStart" onchange="handleEditTaskStartChange(this)" disabled required>
                        <option value="" selected disabled>Select a starting time</option>
                        <% for (let j = 8; j <= 18; j++) { %>
                            <% let time = j < 10 ? '0' + j : j; %>
                            <option value="<%= time %>00"><%= time %>:00</option>
                        <% } %>
                    </select>
                </div>
                <div class="indexTimingColumn">
                    <label class="form-label" for="editTaskNewTimingEnd">End</label>
                    <select class="form-select" id="editTaskNewTimingEnd" onchange="handleEditTaskEndChange(this)" disabled required>
                        <option value="" selected disabled>Select an ending time</option>
                        <% for (let j = 8; j <= 18; j++) { %>
                            <% let time = j < 10 ? '0' + j : j; %>
                            <option value="<%= time %>00"><%= time %>:00</option>
                        <% } %>
                    </select>
                </div>
            </div>
        </div>

        <div class="indexEditButtonsRow">
            <div class="indexEditCancelButton button" onclick="hideEditTaskContainer()">Cancel</div>
            <div class="indexEditDeleteButton button">Delete</div>
            <div class="indexEditSubmitButton button" id="indexEditTaskSubmitButton">Submit</div>
        </div>
    </div>

    <div class="timetableHeadingContainer">
        <h1 class="timetableTitle">Timetable</h1>
        <div class="timetableOptionsContainer">
            <div class="timetableOptionsTopRow">
                <a class="timetablePeriodButton <% if (weekOrMonth == 'week') { %> timetablePeriodButtonSelected <% } %>" href="/timetable/week/today">Week</a>
                <a class="timetablePeriodButton <% if (weekOrMonth == 'month') { %> timetablePeriodButtonSelected <% } %>" href="/timetable/month/today">Month</a>
            </div>
            <div class="timetableWeeklyRow">
                <img class="timetableArrow timetableLeftArrow" src="../../icons/timetable-left-arrow.png" alt="Left weekly timetable arrow icon">
                <div class="timetableWeek" style="<%= weekOrMonth == 'month' ? "font-size: 1.5rem;" : "" %>"><%= formattedPeriod %></div>
                <img class="timetableArrow timetableRightArrow" src="../../icons/timetable-right-arrow.png" alt="Right weekly timetable arrow icon">
            </div>
        </div>
    </div>
    <div class="timetableContainer">
        <% if (weekOrMonth == 'week') { %>
            <div class="timingColumn">
                <% for (let r=8; r <= 18; r++) { %>
                    <div class="timingLabel"><%= r + ":00" %></div>
                <% } %>        
            </div>
            <% var todayDate = new Date(); %>
            <% var todayNum = todayDate.getDay(); %>
            <% const daysOfWeek = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]; %>
            <% var today = daysOfWeek[todayNum == 0 ? 6 : todayNum - 1]; %>
            <% for (let day of daysOfWeek) { %>
                <div class="dayColumn">
                    <p class="dayLabel <%= day == today ? 'glowing-text' : '' %>"><%= day %></p>
                    <% for (let r=8; r < 18; r++) { %>
                        <% let unitFound = units.find(unit => unit.timings.some(timing => timing.day == day && parseInt(timing.timingStart.substring(0, 2)) <= r && parseInt(timing.timingEnd.substring(0, 2)) > r)) %>
                        <% if (unitFound) { %>
                            <% const unitTiming = unitFound.timings.find(timing => timing.day == day && parseInt(timing.timingStart.substring(0, 2)) <= r && parseInt(timing.timingEnd.substring(0, 2)) > r) %>
                            <% let unitDuration = parseInt(unitTiming.timingEnd.substring(0, 2)) - parseInt(unitTiming.timingStart.substring(0, 2)); %>
                            <div class="timetableBlock unitBlock" unit_id="<%= unitFound._id %>" style="background-color: <%= unitFound.colour %>; height: <%= (55 * unitDuration) + (4 * (unitDuration - 1)) %>px;" %> <% if (unitFound.type == 'Lesson') { %> onclick="showEditLessonContainer('<%= JSON.stringify(unitFound) %>')" <% } else { %> onclick="showEditTaskContainer('<%= JSON.stringify(unitFound) %>')" <% } %>>
                                <%= unitFound.title %>
                            </div>
                            <% r = parseInt(unitTiming.timingEnd.substring(0, 2)) - 1; %>
                        <% } else { %>
                        <div class="timetableBlock <%= day == today ? 'glowingBlock' : '' %>"></div>
                        <% } %>
                    <% } %>
                </div>
            <% } %>
        <% } else if (weekOrMonth == 'month') { %>
            <% 
                // Helper functions for month display:
                function getDaysInMonth(month) {
                    const monthNames = [
                        "January", "February", "March", "April", "May", "June",
                        "July", "August", "September", "October", "November", "December"
                    ];
                    const year = new Date().getFullYear(); // Assuming current year
                                
                    const monthIndex = monthNames.findIndex(m => m === month);
                    const date = new Date(year, monthIndex + 1, 0);
                    return date.getDate();
                }
            
                function getStartingDay(month) {
                    const monthNames = [
                        "January", "February", "March", "April", "May", "June",
                        "July", "August", "September", "October", "November", "December"
                    ];
                    const year = new Date().getFullYear(); // Assuming current year
                                
                    const monthIndex = monthNames.findIndex(m => m === month);
                    const date = new Date(year, monthIndex, 1);
                    const startingDay = date.getDay();
                                
                    return (startingDay + 6) % 7 + 1;
                }
            
                function getDayNumber(column, row, startingDay, daysInMonth) {
                    const emptyCells = startingDay;
                    const currentCell = column + row * 7;
                    const dayNumber = currentCell - emptyCells + 1;
            
                    if (dayNumber > 0 && dayNumber <= daysInMonth) {
                        return dayNumber;
                    } else if (dayNumber <= 0) {
                        const prevMonthDays = getDaysInMonth(getPreviousMonth());
                        return -(prevMonthDays + dayNumber); // Return negative to have class for not current month day
                    } else {
                        return -(dayNumber - daysInMonth); // Return negative to have class for not current month day
                    }
                }
            
                function getPreviousMonth() {
                    // Assuming you have access to the formattedPeriod variable
                    // that contains the selected month, you can modify this function accordingly
                    const monthNames = [
                        "January", "February", "March", "April", "May", "June",
                        "July", "August", "September", "October", "November", "December"
                    ];
                    const currentMonth = formattedPeriod;
                    const currentMonthIndex = monthNames.findIndex(m => m === currentMonth);
                    const previousMonthIndex = (currentMonthIndex + 11) % 12;
                    return monthNames[previousMonthIndex];
                }
            %>
            
            <div class="monthContainer">
                <% const daysOfWeekMonthly = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]; %>
                <% const daysInMonth = getDaysInMonth(formattedPeriod); %>
                <% const startingDay = getStartingDay(formattedPeriod); %>
                
                <% for (let c = 0; c < 7; c++) { %>
                    <div class="monthColumn">
                        <h4 class="monthHeader"><%= daysOfWeekMonthly[c] %></h4>
                        <% for (let r = 0; r < 6; r++) { %>
                            <% const dayNumber = getDayNumber(c, r, startingDay, daysInMonth); %>
                            <div class="monthDay <%= dayNumber < 0 ? 'notCurrentMonthDay' : '' %>">
                                <%= Math.abs(dayNumber) %>
                            </div>
                        <% } %>
                    </div>
                <% } %>
            </div>
        <% } %>
    </div>
</div>
<div class="indexSideContainer">
    <div class="indexNewLessonFormDropdownButton button">+ New Lesson</div>
    <form id="indexNewLessonForm" action='/timetable' method='POST'>
        <div class="indexInputRow">
            <label class="form-label" for="lessonTitle">Title</label>
            <input class="form-control" type="text" id="lessonTitle" required>
        </div>
        <div class="indexInputRow">
            <label class="form-label" for="colour">Colour</label>
            <select class="form-select" id="colour" required>
                <option value="" selected disabled>Select a colour</option>
                <option value="#C62828">Red</option>
                <option value="#1565C0">Blue</option>
                <option value="#2E7D32">Green</option>
                <option value="#FFA000">Yellow</option>
                <option value="#6A1B9A">Purple</option>
                <option value="#F08731">Orange</option>
            </select>
        </div>

        <div class="indexInputRow">
            <div class="indexTimingColumn">
                <label class="form-label" for="day">Day</label>
                <select class="form-select" id="day" onchange="handleDayChange(this)" required>
                    <option value="" selected disabled>Select a day</option>
                    <option value="Monday">Monday</option>
                    <option value="Tuesday">Tuesday</option>
                    <option value="Wednesday">Wednesday</option>
                    <option value="Thursday">Thursday</option>
                    <option value="Friday">Friday</option>
                    <option value="Saturday">Saturday</option>
                    <option value="Sunday">Sunday</option>
                </select>            
            </div>
            <div class="indexTimingColumn">
                <label class="form-label" for="timingStart">Start</label>
                <select class="form-select" id="timingStart" onchange="handleStartChange(this)" disabled required>
                    <option value="" selected disabled>Select a starting time</option>
                    <% for (let j = 8; j <= 18; j++) { %>
                        <% let time = j < 10 ? '0' + j : j; %>
                        <option value="<%= time %>00"><%= time %>:00</option>
                    <% } %>
                </select>
            </div>
            <div class="indexTimingColumn">
                <label class="form-label" for="timingEnd">End</label>
                <select class="form-select" id="timingEnd" onchange="handleEndChange(this)" disabled required>
                    <option value="" selected disabled>Select an ending time</option>
                    <% for (let j = 8; j <= 18; j++) { %>
                        <% let time = j < 10 ? '0' + j : j; %>
                        <option value="<%= time %>00"><%= time %>:00</option>
                    <% } %>
                </select>
            </div>
        </div>
        <div id="selectedRows"></div>
        <div class="indexFormsBottomRow">
            <div class="indexCancelNewLessonButton indexCancelButton button">Cancel</div>
            <div class="indexSubmitNewLessonButton indexSubmitButton button" type="submit">Submit</div>
        </div>
    </form>
    <div class="indexNewTaskFormDropdownButton button">+ New Task</div>
    <form id="indexNewTaskForm">
        <div class="indexInputRow">
            <label class="form-label" for="taskTitle">Title</label>
            <input class="form-control" type="text" id="taskTitle" required>
        </div>
        <div class="indexInputRow">
            <label class="form-label" for="duration">Duration (in hours)</label>
            <input class="form-control" type="number" id="duration" required>
        </div>
        <div class="indexInputRow">
            <label class="form-label" for="releasedOn">Released On</label>
            <select class="form-select" id="releasedOn" required>
                <option value="" selected disabled>Select a day</option>
                <option value="Monday">Monday</option>
                <option value="Tuesday">Tuesday</option>
                <option value="Wednesday">Wednesday</option>
                <option value="Thursday">Thursday</option>
                <option value="Friday">Friday</option>
                <option value="Saturday">Saturday</option>
                <option value="Sunday">Sunday</option>
            </select>
        </div>
        <div class="indexInputRow">
            <label class="form-label" for="deadline">Deadline</label>
            <select class="form-select" id="deadline" required>
                <option value="" selected disabled>Select a day</option>
                <option value="Monday">Monday</option>
                <option value="Tuesday">Tuesday</option>
                <option value="Wednesday">Wednesday</option>
                <option value="Thursday">Thursday</option>
                <option value="Friday">Friday</option>
                <option value="Saturday">Saturday</option>
                <option value="Sunday">Sunday</option>
            </select>
        </div>
        <div class="indexFormsBottomRow">
            <div class="indexCancelNewTaskButton indexCancelButton button">Cancel</div>
            <div class="indexSubmitNewTaskButton indexSubmitButton button">Submit</div>
        </div>
    </form>
    <hr class="indexFormBorder">
    <h2 class="indexListHeader">Today</h2>
    <div class="indexListContainer">
        <% for (let unit of units.filter(unit => unit.timings.some(timing => timing.day == today))) { %>
            <div class="indexListUnit" style="background-color: <%= unit.colour %>;" <% if (unit.type == 'Lesson') { %> onclick="showEditLessonContainer('<%= JSON.stringify(unit) %>')" <% } else { %> onclick="showEditTaskContainer('<%= JSON.stringify(unit) %>')" <% } %>><%= unit.title %></div>
        <% } %>
    </div>
</div>
</div>

<script>
    // Make same lesson cells hover the same:
    const cells = document.querySelectorAll(".unitBlock");
    cells.forEach(cell => {
        cell.addEventListener('mouseover', () => {
            const sameUnitCells = document.querySelectorAll(`[unit_id="${cell.getAttribute('unit_id')}"]`);
            for (const sameUnitCell of sameUnitCells) {
                sameUnitCell.style.opacity = 0.8;
                sameUnitCell.style.transform = 'scale(1.04)';
            }
        })
        cell.addEventListener('mouseout', function() {
            const sameUnitCells = document.querySelectorAll(`[unit_id="${cell.getAttribute('unit_id')}"]`);
            for (const sameUnitCell of sameUnitCells) {
                sameUnitCell.style.opacity = 1;
                sameUnitCell.style.transform = 'scale(1)';
            }
        });
    });


    // Onclick for new lesson/task dropdown buttons:
    const newLessonDropdownButton = document.getElementsByClassName('indexNewLessonFormDropdownButton')[0];
    const newTaskDropdownButton = document.getElementsByClassName('indexNewTaskFormDropdownButton')[0];

    let currentTimings = [];

    newLessonDropdownButton.addEventListener('click', () => {
        const newLessonForm = document.getElementById('indexNewLessonForm');
        if (newLessonForm.offsetHeight == '0') {
            var height = newLessonForm.scrollHeight;
            newLessonForm.style.height = height + "px";
            newLessonForm.style.paddingBottom = "5px";
        } else {
            newLessonForm.style.height = '0px';
            newLessonForm.style.paddingBottom = "0px";
        }
    });

    newTaskDropdownButton.addEventListener('click', () => {
        const newTaskForm = document.getElementById('indexNewTaskForm');
        if (newTaskForm.offsetHeight == '0') {
            var height = newTaskForm.scrollHeight;
            newTaskForm.style.height = height + "px";
        } else {
            newTaskForm.style.height = '0px';
        }
    })

    // Timings:
    let currentIndex = 0;

    function handleDayChange(daySelect) {
        const startSelect = document.getElementById("timingStart");
        startSelect.disabled = false;
    }

    function handleStartChange(startSelect) {
        const endSelect = document.getElementById("timingEnd");
        endSelect.disabled = false;
    }

    let timingCount = 0;
    function handleEndChange(endSelect) {
        if (endSelect.selectedIndex === 0) {
            return;
        }

        const daySelect = document.getElementById("day");
        const startSelect = document.getElementById("timingStart");
        const selectedDay = daySelect.options[daySelect.selectedIndex].value;
        const selectedStart = startSelect.options[startSelect.selectedIndex].value;
        const selectedEnd = endSelect.options[endSelect.selectedIndex].value;

        const units = JSON.parse('<%- unitsString %>');

        // Check overlap with existing units:
        if (units.some(unit => unit.timings.some(timing => timing.day == selectedDay && timing.timingStart < selectedEnd && timing.timingEnd > selectedStart))) {
            alert("This timing overlaps with the timing of an existing lesson/task!");
            daySelect.selectedIndex = 0;
            startSelect.selectedIndex = 0;
            endSelect.selectedIndex = 0;
            startSelect.disabled = true;
            endSelect.disabled = true;
            return;
        }

        // Check overlap with current unit:
        if (currentTimings.some(timing => timing.day == selectedDay && timing.timingStart < selectedEnd && timing.timingEnd > selectedStart)) {
            alert("This timing overlaps with the timing of the current new lesson!");
            daySelect.selectedIndex = 0;
            startSelect.selectedIndex = 0;
            endSelect.selectedIndex = 0;
            startSelect.disabled = true;
            endSelect.disabled = true;
            return;
        }

        // Check start > end:
        if (selectedStart >= selectedEnd) {
            alert('Starting time should be later than Ending time!');
            return;
        }

        // Display the selected values above the indexInputRow
        const selectedRows = document.getElementById('selectedRows');
        const newRow = document.createElement('div');
        newRow.innerText = `${selectedDay}, ${selectedStart} - ${selectedEnd}`;
        newRow.className = 'indexNewLessonTimingRow';

        // Create delete button
        const deleteButton = document.createElement('button');
        deleteButton.setAttribute('timing-index', timingCount);
        deleteButton.innerText = 'Delete';
        deleteButton.className = 'indexNewLessonTimingDeleteButton';
        deleteButton.addEventListener('click', (event) => {
            const newLessonForm = document.getElementById('indexNewLessonForm');
            const timingRows = document.getElementsByClassName('indexNewLessonTimingRow');
            const timingRowHeight = timingRows[0].scrollHeight
            var formHeight = newLessonForm.scrollHeight;
            newLessonForm.style.height = formHeight - timingRowHeight + "px";
            if (timingRows.length == 1) {
                newLessonForm.style.paddingBottom = "0px";
            }
            selectedRows.removeChild(newRow);
            currentTimings = currentTimings.filter(timing => timing.index != event.target.getAttribute('timing-index'), 1);
            timingCount--;
        });
        newRow.appendChild(deleteButton);

        selectedRows.appendChild(newRow);

        currentTimings.push({
            'index': timingCount,
            'day': selectedDay,
            'timingStart': selectedStart,
            'timingEnd': selectedEnd
        })
        timingCount++;

        // Expand for height:
        const newLessonForm = document.getElementById('indexNewLessonForm');
        var height = newLessonForm.scrollHeight;
        newLessonForm.style.height = height + "px";
        newLessonForm.style.paddingBottom = "5px";

        // Reset the form for the next selection
        currentIndex++;
        daySelect.selectedIndex = 0;
        startSelect.selectedIndex = 0;
        endSelect.selectedIndex = 0;
        startSelect.disabled = true;
        endSelect.disabled = true;
    }

    // Onclick for cancel buttons:
    const newLessonCancelButton = document.getElementsByClassName('indexCancelNewLessonButton')[0];
    const newTaskCancelButton = document.getElementsByClassName('indexCancelNewTaskButton')[0];

    newLessonCancelButton.addEventListener('click', () => {
        const newLessonForm = document.getElementById('indexNewLessonForm');
        newLessonForm.style.height = "0px";
        newLessonForm.style.paddingBottom = "0px";
    })

    newTaskCancelButton.addEventListener('click', () => {
        const newTaskForm = document.getElementById('indexNewTaskForm');
        newTaskForm.style.height = '0px';
    })

    // Onclick for submit buttons:

    function showLoadingScreen() {
        document.getElementById('loadingScreenWrapper').style.display = 'flex';
    }

    function hideLoadingScreen() {
        document.getElementById('loadingScreenWrapper').style.display = 'none';
    }

    // New Lesson:
    const newLessonSubmitButton = document.getElementsByClassName('indexSubmitNewLessonButton')[0];
    newLessonSubmitButton.addEventListener('click', () => {
        // Check fields:
        const newLessonTitle = document.getElementById('lessonTitle').value;
        const newLessonColour = document.getElementById('colour').value;
        const newTimings = currentTimings.map(timing => {
            delete timing.index;
            return timing;
        });
        if (!newLessonTitle) {
            alert('Please fill in the Lesson Title!');
            return;
        }
        if (!newLessonColour) {
            alert('Please pick a Lesson Colour!');
            return;
        }
        if (newTimings.length <= 0) {
            alert('Please fill in at least 1 timing!');
            return;
        }

        // Display loading screen:
        showLoadingScreen();
        
        const requestBody = new URLSearchParams();
        requestBody.append('title', newLessonTitle);
        requestBody.append('colour', newLessonColour);
        requestBody.append('timings', JSON.stringify(newTimings));


        fetch('/timetable', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: requestBody.toString()
        })
        .then(data => {
            window.location.href = '/timetable/week/today';
        })
        .catch(err => {
            alert("There was a problem adding this lesson!");
            hideLoadingScreen();
        })
    })

    //New Task:
    const newTaskSubmitButton = document.getElementsByClassName('indexSubmitNewTaskButton')[0];
    newTaskSubmitButton.addEventListener('click', () => {
        const newTaskTitle = document.getElementById('taskTitle').value;
        const newTaskDuration = document.getElementById('duration').value;
        const newTaskReleasedOn = document.getElementById('releasedOn').value;
        const newTaskDeadline = document.getElementById('deadline').value;

        // Check fields:
        if (!newTaskTitle) {
            alert('Please fill in the Task Title!');
            return;
        }
        if (!newTaskDuration) {
            alert('Please fill in the Task Duration!');
            return;
        }
        if (!newTaskReleasedOn) {
            alert('Please pick a day the Task is Released!');
            return;
        }
        if (!newTaskDeadline) {
            alert('Please pick a day the Task is Due!');
            return;
        }

        // Display loading screen:
        showLoadingScreen();

        const requestBody = new URLSearchParams();
        requestBody.append('title', newTaskTitle);
        requestBody.append('duration', newTaskDuration);
        requestBody.append('releasedOn', newTaskReleasedOn);
        requestBody.append('deadline', newTaskDeadline);

        fetch('/weekly-tasks', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: requestBody.toString()
        })
        .then(data => {
            window.location.href = '/timetable/week/today';
        })
        .catch(err => {
            alert("There was a problem adding this task!");
            hideLoadingScreen();
        })
    })



    // Onclick for arrow buttons:
    const weekOrMonth = "<%= weekOrMonth %>";
    const period = "<%= formattedPeriod %>";

    const leftArrowButton = document.getElementsByClassName('timetableLeftArrow')[0];
    const rightArrowButton = document.getElementsByClassName('timetableRightArrow')[0];

    function getPreviousWeek(dateRange) {
        const parts = dateRange.split(" - ");
        const startDate = new Date(parts[0]);
        const endDate = new Date(parts[1]);

        const previousWeekStartDate = new Date(startDate);
        previousWeekStartDate.setDate(startDate.getDate() - 7);
        const previousWeekEndDate = new Date(endDate);
        previousWeekEndDate.setDate(endDate.getDate() - 7);

        return (
            previousWeekStartDate.toLocaleDateString("en", {
            month: "long",
            day: "numeric",
            year: "numeric",
            }) +
            " - " +
            previousWeekEndDate.toLocaleDateString("en", {
            month: "long",
            day: "numeric",
            year: "numeric",
            })
        );
        }

    function getNextWeek(dateRange) {
        const parts = dateRange.split(" - ");
        const startDate = new Date(parts[0]);
        const endDate = new Date(parts[1]);

        const nextWeekStartDate = new Date(startDate);
        nextWeekStartDate.setDate(startDate.getDate() + 7);
        const nextWeekEndDate = new Date(endDate);
        nextWeekEndDate.setDate(endDate.getDate() + 7);

        return (
            nextWeekStartDate.toLocaleDateString("en", {
            month: "long",
            day: "numeric",
            year: "numeric",
            }) +
            " - " +
            nextWeekEndDate.toLocaleDateString("en", {
            month: "long",
            day: "numeric",
            year: "numeric",
            })
        );
    }

    function getNextMonth(currentMonth) {
        const currentDate = new Date(`1 ${currentMonth}`);
        currentDate.setMonth(currentDate.getMonth() + 1);
        return currentDate.toLocaleString('default', { month: 'long' });
    }

    function getPreviousMonth(currentMonth) {
        const currentDate = new Date(`1 ${currentMonth}`);
        currentDate.setMonth(currentDate.getMonth() - 1);
        return currentDate.toLocaleString('default', { month: 'long' });
    }

    let previousPeriod = "";
    let nextPeriod = "";
    if (weekOrMonth == 'week') {
        nextPeriod = getNextWeek(period);
        previousPeriod = getPreviousWeek(period);
    } else {
        nextPeriod = getNextMonth(period);
        previousPeriod = getPreviousMonth(period);
    }

    leftArrowButton.addEventListener('click', () => {
        window.location.href = `/timetable/${weekOrMonth}/${previousPeriod}`;
    })
    rightArrowButton.addEventListener('click', () => {
        window.location.href = `/timetable/${weekOrMonth}/${nextPeriod}`;
    })


    // Edit functionality:
    let timingIndex = 0;
    const colourList = ["", "#C62828", "#1565C0", "#2E7D32", "#FFA000", "#6A1B9A", "#F08731"];
    const dayList = ["", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
    const timingsList = ["", "0800", "0900", "1000", "1100", "1200", "1300", "1400", "1500", "1600", "1700", "1800"];
    
    // Function to append a new timing row
    function createTimingRow(index, lessonOrTask) {
        const timingRow = document.createElement('div');
        timingRow.classList.add('editTimingRow');
        timingRow.setAttribute('edit-timing-index', index);
        timingRow.innerHTML = `
            <div class="indexTimingColumn">
                <label class="form-label">Day</label>
                <select class="form-select ${"edit" + lessonOrTask + "Day"}" id="${"edit" + lessonOrTask + "Day" + index}" required>
                    <option value="" selected disabled>Select a day</option>
                    <option value="Monday">Monday</option>
                    <option value="Tuesday">Tuesday</option>
                    <option value="Wednesday">Wednesday</option>
                    <option value="Thursday">Thursday</option>
                    <option value="Friday">Friday</option>
                    <option value="Saturday">Saturday</option>
                    <option value="Sunday">Sunday</option>
                </select>            
            </div>
            <div class="indexTimingColumn">
                <label class="form-label">Start</label>
                <select class="form-select ${"edit" + lessonOrTask + "TimingStart"}" id="${"edit" + lessonOrTask + "TimingStart" + index}" required>
                    <option value="" selected>Select a starting time</option>
                    <% for (let j = 8; j <= 18; j++) { %>
                        <% let time = j < 10 ? '0' + j : j; %>
                        <option value="<%= time %>00"><%= time %>:00</option>
                    <% } %>
                </select>
            </div>
            <div class="indexTimingColumn">
                <label class="form-label">End</label>
                <select class="form-select ${"edit" + lessonOrTask + "TimingEnd"}"" id="${"edit" + lessonOrTask + "TimingEnd" + index}" required>
                    <option value="" selected>Select an ending time</option>
                    <% for (let j = 8; j <= 18; j++) { %>
                        <% let time = j < 10 ? '0' + j : j; %>
                        <option value="<%= time %>00"><%= time %>:00</option>
                    <% } %>
                </select>
            </div>
            <div class="editDeleteTimingButton button" onclick="deleteEditTimingRow(${index})">Delete</div>
        `;
        return timingRow;
    }

    function handleEditLessonDayChange(daySelect) {
        const startSelect = document.getElementById("editLessonNewTimingStart");
        startSelect.disabled = false;
    }

    function handleEditLessonStartChange(startSelect) {
        const endSelect = document.getElementById("editLessonNewTimingEnd");
        endSelect.disabled = false;
    }
    
    function handleEditLessonEndChange(endSelect) {
        if (endSelect.selectedIndex === 0) {
            return;
        }
        const daySelect = document.getElementById("editLessonNewDay");
        const startSelect = document.getElementById("editLessonNewTimingStart");
        const selectedDay = daySelect.options[daySelect.selectedIndex].value;
        const selectedStart = startSelect.options[startSelect.selectedIndex].value;
        const selectedEnd = endSelect.options[endSelect.selectedIndex].value;

        const units = JSON.parse('<%- unitsString %>');

        // Check overlap with existing units:
        if (units.some(unit => unit.timings.some(timing => timing.day == selectedDay && timing.timingStart < selectedEnd && timing.timingEnd > selectedStart))) {
            alert("This timing overlaps with the timing of an existing lesson/task!");
            daySelect.selectedIndex = 0;
            startSelect.selectedIndex = 0;
            endSelect.selectedIndex = 0;
            startSelect.disabled = true;
            endSelect.disabled = true;
            return;
        }

        // Check start > end:
        if (selectedStart >= selectedEnd) {
            alert('Starting time should be later than Ending time!');
            return;
        }

        // Insert new timing row:
        const timingContainer = document.getElementById('editLessonTimingContainer');
        const editNewTimingRow = document.getElementsByClassName('editNewLessonTimingRow')[0];
        const newTimingRow = createTimingRow(timingIndex, 'Lesson');
        timingContainer.insertBefore(newTimingRow, editNewTimingRow);

        const timingDay = document.getElementById('editLessonDay' + timingIndex);
        const timingStart = document.getElementById('editLessonTimingStart' + timingIndex);
        const timingEnd = document.getElementById('editLessonTimingEnd' + timingIndex);

        timingDay.selectedIndex = dayList.indexOf(selectedDay);
        timingStart.selectedIndex = timingsList.indexOf(selectedStart);
        timingEnd.selectedIndex = timingsList.indexOf(selectedEnd);
        timingIndex++;

        // Reset the form for the next selection:
        daySelect.selectedIndex = 0;
        startSelect.selectedIndex = 0;
        endSelect.selectedIndex = 0;
        startSelect.disabled = true;
        endSelect.disabled = true;
    }


    function handleEditTaskDayChange(daySelect) {
        const startSelect = document.getElementById("editTaskNewTimingStart");
        startSelect.disabled = false;
    }

    function handleEditTaskStartChange(startSelect) {
        const endSelect = document.getElementById("editTaskNewTimingEnd");
        endSelect.disabled = false;
    }

    function handleEditTaskEndChange(endSelect) {
        if (endSelect.selectedIndex === 0) {
            return;
        }
        const daySelect = document.getElementById("editTaskNewDay");
        const startSelect = document.getElementById("editTaskNewTimingStart");
        const selectedDay = daySelect.options[daySelect.selectedIndex].value;
        const selectedStart = startSelect.options[startSelect.selectedIndex].value;
        const selectedEnd = endSelect.options[endSelect.selectedIndex].value;

        const units = JSON.parse('<%- unitsString %>');

        // Check overlap with existing units:
        if (units.some(unit => unit.timings.some(timing => timing.day == selectedDay && timing.timingStart < selectedEnd && timing.timingEnd > selectedStart))) {
            alert("This timing overlaps with the timing of an existing lesson/task!");
            daySelect.selectedIndex = 0;
            startSelect.selectedIndex = 0;
            endSelect.selectedIndex = 0;
            startSelect.disabled = true;
            endSelect.disabled = true;
            return;
        }

        // Check start > end:
        if (selectedStart >= selectedEnd) {
            alert('Starting time should be later than Ending time!');
            return;
        }

        // Insert new timing row:
        const timingContainer = document.getElementById('editTaskTimingContainer');
        const editNewTimingRow = document.getElementsByClassName('editNewTaskTimingRow')[0];
        const newTimingRow = createTimingRow(timingIndex, 'Task');
        timingContainer.insertBefore(newTimingRow, editNewTimingRow);

        const timingDay = document.getElementById('editTaskDay' + timingIndex);
        const timingStart = document.getElementById('editTaskTimingStart' + timingIndex);
        const timingEnd = document.getElementById('editTaskTimingEnd' + timingIndex);

        timingDay.selectedIndex = dayList.indexOf(selectedDay);
        timingStart.selectedIndex = timingsList.indexOf(selectedStart);
        timingEnd.selectedIndex = timingsList.indexOf(selectedEnd);
        timingIndex++;

        // Reset the form for the next selection:
        daySelect.selectedIndex = 0;
        startSelect.selectedIndex = 0;
        endSelect.selectedIndex = 0;
        startSelect.disabled = true;
        endSelect.disabled = true;
    }


    function deleteEditTimingRow(index) {
        const timingRow = document.querySelector(`[edit-timing-index="${index}"]`);
        timingRow.remove();
    }

    // Lesson:
    function showEditLessonContainer(lessonString) {
        document.getElementById("indexOverlay").style.display = 'block';

        const lesson = JSON.parse(lessonString);
        var editContainer = document.getElementById('indexEditLessonContainer');
        editContainer.style.display = 'block';

        const editLessonTitle = document.getElementById('editLessonTitle');
        const editLessonColour = document.getElementById('editLessonColour');

        editLessonTitle.value = lesson.title;
        editLessonColour.selectedIndex = colourList.indexOf(lesson.colour);
        
        const timingContainer = document.getElementById('editLessonTimingContainer');
        const editNewTimingRow = document.getElementsByClassName('editNewLessonTimingRow')[0];
        for (let timing of lesson.timings) {
            const timingRow = createTimingRow(timingIndex, 'Lesson');
            
            timingContainer.insertBefore(timingRow, editNewTimingRow)

            const timingDay = document.getElementById('editLessonDay' + timingIndex);
            const timingStart = document.getElementById('editLessonTimingStart' + timingIndex);
            const timingEnd = document.getElementById('editLessonTimingEnd' + timingIndex);

            timingDay.selectedIndex = dayList.indexOf(timing.day);
            timingStart.selectedIndex = timingsList.indexOf(timing.timingStart);
            timingEnd.selectedIndex = timingsList.indexOf(timing.timingEnd);
            timingIndex++;
        }

        const editLessonSubmitButton = document.getElementById('indexEditLessonSubmitButton');
        editLessonSubmitButton.addEventListener('click', () => submitEditLesson(lesson._id));

        const editLessonDeleteButton = document.getElementsByClassName('indexEditDeleteButton')[0];
        editLessonDeleteButton.addEventListener('click', () => deleteOnclick(lesson._id));

    }

    function submitEditLesson(lessonId) {
        // Check fields:
        const newLessonTitle = document.getElementById('editLessonTitle').value;
        const newLessonColour = document.getElementById('editLessonColour').value;
        const newTimingRows = document.getElementsByClassName('editTimingRow');

        if (!newLessonTitle) {
            alert('Please fill in the Lesson Title!');
            return;
        }
        if (!newLessonColour) {
            alert('Please pick a Lesson Colour!');
            return;
        }
        if (newTimingRows.length <= 0) {
            alert('Please fill in at least 1 timing!');
            return;
        }
        
        // Display loading screen:
        showLoadingScreen();

        const newLessonTimings = [];
        for (let timingRow of newTimingRows) {
            if (timingRow.classList.contains('editNewLessonTimingRow') || timingRow.classList.contains('editNewTaskTimingRow')) {
                continue;
            }
            const day = timingRow.querySelector('select.editLessonDay').value;
            const timingStart = timingRow.querySelector('select.editLessonTimingStart').value;
            const timingEnd = timingRow.querySelector('select.editLessonTimingEnd').value;
            newLessonTimings.push({ day, timingStart, timingEnd });
        }
        
        const requestBody = new URLSearchParams();
        requestBody.append('title', newLessonTitle);
        requestBody.append('colour', newLessonColour);
        requestBody.append('timings', JSON.stringify(newLessonTimings));
        const putUrl = `/timetable/${lessonId}`
        fetch(putUrl, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: requestBody.toString()
        })
        .then(response => {
            window.location.href = '/timetable/week/today';
        })
        .catch(err => {
            alert("There was a problem editting this lesson!");
            hideLoadingScreen();
        })    
    }

    function hideEditLessonContainer() {
        document.getElementById("indexOverlay").style.display = 'none';

        // Remove timing rows:
        const timingContainer = document.getElementById('editLessonTimingContainer');
        const timingRows = [...timingContainer.getElementsByClassName('editTimingRow')];
        timingRows.forEach(timingRow => {
            if (!timingRow.classList.contains('editNewLessonTimingRow')) {
                timingRow.remove();
            }
        })

        timingIndex = 0;

        // Hide container:
        var editContainer = document.getElementById('indexEditLessonContainer');
        editContainer.style.display = 'none';
    }

    // Task:
    function showEditTaskContainer(taskString) {
        document.getElementById("indexOverlay").style.display = 'block';

        const task = JSON.parse(taskString);
        var editContainer = document.getElementById('indexEditTaskContainer');
        editContainer.style.display = 'block';

                
        const editTaskTitle = document.getElementById('editTaskTitle');

        editTaskTitle.value = task.title;
        
        const timingContainer = document.getElementById('editTaskTimingContainer');
        const editNewTimingRow = document.getElementsByClassName('editNewTaskTimingRow')[0];
        for (let timing of task.timings) {
            const timingRow = createTimingRow(timingIndex, 'Task');
            
            timingContainer.insertBefore(timingRow, editNewTimingRow)

            const timingDay = document.getElementById('editTaskDay' + timingIndex);
            const timingStart = document.getElementById('editTaskTimingStart' + timingIndex);
            const timingEnd = document.getElementById('editTaskTimingEnd' + timingIndex);

            timingDay.selectedIndex = dayList.indexOf(timing.day);
            timingStart.selectedIndex = timingsList.indexOf(timing.timingStart);
            timingEnd.selectedIndex = timingsList.indexOf(timing.timingEnd);
            timingIndex++;
        }

        const editTaskSubmitButton = document.getElementById('indexEditTaskSubmitButton');
        editTaskSubmitButton.addEventListener('click', () => submitEditTask(task._id));

        const editTaskDeleteButton = document.getElementsByClassName('indexEditDeleteButton')[1];
        editTaskDeleteButton.addEventListener('click', () => deleteOnclick(task._id));
    }

    function hideEditTaskContainer() {
        document.getElementById("indexOverlay").style.display = 'none';

        // Remove timing rows:
        const timingContainer = document.getElementById('editTaskTimingContainer');
        const timingRows = [...timingContainer.getElementsByClassName('editTimingRow')];
        timingRows.forEach(timingRow => {
            if (!timingRow.classList.contains('editNewTaskTimingRow')) {
                timingRow.remove();
            }
        })

        timingIndex = 0;

        var editContainer = document.getElementById('indexEditTaskContainer');
        editContainer.style.display = 'none';
    }

    function submitEditTask(taskId) {
        // Check fields:
        const newTaskTitle = document.getElementById('editTaskTitle').value;
        const newTimingRows = document.getElementsByClassName('editTimingRow');

        if (!newTaskTitle) {
            alert('Please fill in the Task Title!');
            return;
        }
        if (newTimingRows.length <= 0) {
            alert('Please fill in at least 1 timing!');
            return;
        }
        
        // Display loading screen:
        showLoadingScreen();

        const newTaskTimings = [];
        for (let timingRow of newTimingRows) {
            if (timingRow.classList.contains('editNewLessonTimingRow') || timingRow.classList.contains('editNewTaskTimingRow')) {
                continue;
            }
            const day = timingRow.querySelector('select.editTaskDay').value;
            const timingStart = timingRow.querySelector('select.editTaskTimingStart').value;
            const timingEnd = timingRow.querySelector('select.editTaskTimingEnd').value;
            newTaskTimings.push({ day, timingStart, timingEnd });
        }
        
        const requestBody = new URLSearchParams();
        requestBody.append('title', newTaskTitle);
        requestBody.append('timings', JSON.stringify(newTaskTimings));
        const putUrl = `/weekly-tasks/${taskId}`
        fetch(putUrl, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: requestBody.toString()
        })
        .then(response => {
            window.location.href = '/timetable/week/today';
        })
        .catch(err => {
            alert("There was a problem editting this task!");
            hideLoadingScreen();
        })    
    }


    // Delete button onclick:
    function deleteOnclick(unitId) {
        const deleteUrl = `/timetable/${unitId}`;
        fetch(deleteUrl, {
            method: 'DELETE',
        })
        .then(response => {
            window.location.href = '/timetable/week/today';
        })
        .catch(err => {
            alert("There was a problem deleting this lesson/task!");
        }) 
    }

</script>

