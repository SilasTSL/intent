<% layout('layouts/boilerplate')%>
<div id="indexPageBody">
<div id="timetableBodyContainer">
    <div class="timetableHeadingContainer">
        <h1 class="timetableTitle">Timetable</h1>
        <div class="timetableOptionsContainer">
            <div class="timetableOptionsTopRow">
                <a class="timetablePeriodButton <% if (weekOrMonth == 'week') { %> timetablePeriodButtonSelected <% } %>" href="/timetable/week/today">Week</a>
                <a class="timetablePeriodButton <% if (weekOrMonth == 'month') { %> timetablePeriodButtonSelected <% } %>" href="/timetable/month/today">Month</a>
            </div>
            <div class="timetableWeeklyRow">
                <img class="timetableArrow timetableLeftArrow" src="../../icons/timetable-left-arrow.png" alt="Left weekly timetable arrow icon">
                <div class="timetableWeek" style="<%= weekOrMonth == 'month' ? "font-size: 1.5rem;" : "" %>"><%= formattedPeriod %></div>
                <img class="timetableArrow timetableRightArrow" src="../../icons/timetable-right-arrow.png" alt="Right weekly timetable arrow icon">
            </div>
        </div>
    </div>
    <div class="timetableContainer">
        <% if (weekOrMonth == 'week') { %>
        <div class="timingColumn">
            <% for (let r=8; r <= 18; r++) { %>
                <div class="timingLabel"><%= r + ":00" %></div>
            <% } %>        
        </div>
        <% const daysOfWeek = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]; %>
        <% for (let day of daysOfWeek) { %>
            <div class="dayColumn">
                <p class="dayLabel"><%= day %></p>
                <% for (let r=8; r < 18; r++) { %>
                    <% let unitFound = units.find(unit => unit.timings.some(timing => timing.day == day && parseInt(timing.timingStart.substring(0, 2)) <= r && parseInt(timing.timingEnd.substring(0, 2)) > r)) %>
                    <% if (unitFound) { %>
                        <% const unitTiming = unitFound.timings.find(timing => timing.day == day && parseInt(timing.timingStart.substring(0, 2)) <= r && parseInt(timing.timingEnd.substring(0, 2)) > r) %>
                        <% let unitDuration = parseInt(unitTiming.timingEnd.substring(0, 2)) - parseInt(unitTiming.timingStart.substring(0, 2)); %>
                        <div class="timetableBlock unitBlock" unit_id="<%= unitFound._id %>" style="background-color: <%= unitFound.colour %>; height: <%= (55 * unitDuration) + (4 * (unitDuration - 1)) %>px;" <% if (unitFound.type == "Lesson") { %> onclick="window.location.href = '/edit/<%= unitFound._id %>/lesson'" <% } else { %> onclick="window.location.href = '/edit/<%= unitFound._id %>/weekly-tasks'" <% } %>>
                            <%= unitFound.title %>
                        </div>
                        <% r = parseInt(unitTiming.timingEnd.substring(0, 2)) - 1; %>
                    <% } else { %>
                    <div class="timetableBlock"></div>
                    <% } %>
                <% } %>
            </div>
        <% } %>
        <% } else if (weekOrMonth == 'month') { %>

        <% } %>
    </div>
</div>
<div class="indexNewFormsContainer">
    <div class="indexNewLessonFormDropdownButton button">+ New Lesson</div>
    <form id="indexNewLessonForm" action='/timetable' method='POST'>
        <div class="indexInputRow">
            <label class="form-label" for="title">Title</label>
            <input class="form-control" type="text" id="title" required>
        </div>
        <div class="indexInputRow">
            <label class="form-label" for="colour">Colour</label>
            <select class="form-select" id="colour" required>
                <option value="" selected disabled>Select a colour</option>
                <option value="#C62828">Red</option>
                <option value="#1565C0">Blue</option>
                <option value="#2E7D32">Green</option>
                <option value="#FFA000">Yellow</option>
                <option value="#6A1B9A">Purple</option>
                <option value="#F08731">Orange</option>
            </select>
        </div>

        <div class="indexInputRow">
            <div class="indexTimingColumn">
                <label class="form-label" for="day">Day</label>
                <select class="form-select" id="day" onchange="handleDayChange(this)" required>
                    <option value="" selected disabled>Select a day</option>
                    <option value="Monday">Monday</option>
                    <option value="Tuesday">Tuesday</option>
                    <option value="Wednesday">Wednesday</option>
                    <option value="Thursday">Thursday</option>
                    <option value="Friday">Friday</option>
                    <option value="Saturday">Saturday</option>
                    <option value="Sunday">Sunday</option>
                </select>            
            </div>
            <div class="indexTimingColumn">
                <label class="form-label" for="timingStart">Start</label>
                <select class="form-select" id="timingStart" onchange="handleStartChange(this)" disabled required>
                    <option value="" selected disabled>Select a starting time</option>
                    <% for (let j = 8; j <= 18; j++) { %>
                        <% let time = j < 10 ? '0' + j : j; %>
                        <option value="<%= time %>00"><%= time %>:00</option>
                    <% } %>
                </select>
            </div>
            <div class="indexTimingColumn">
                <label class="form-label" for="timingEnd">End</label>
                <select class="form-select" id="timingEnd" onchange="handleEndChange(this)" disabled required>
                    <option value="" selected disabled>Select an ending time</option>
                    <% for (let j = 9; j <= 18; j++) { %>
                        <% let time = j < 10 ? '0' + j : j; %>
                        <option value="<%= time %>00"><%= time %>:00</option>
                    <% } %>
                </select>
            </div>
        </div>
        <div id="selectedRows"></div>
        <div class="indexFormsBottomRow">
            <div class="indexCancelNewLessonButton indexCancelButton button">Cancel</div>
            <div class="indexSubmitNewLessonButton indexSubmitButton button" type="submit">Submit</div>
        </div>
    </form>
    <div class="indexNewTaskFormDropdownButton button">+ New Task</div>
    <form id="indexNewTaskForm">
        <div class="indexFormsBottomRow">
            <div class="indexCancelNewTaskButton indexCancelButton button">Cancel</div>
            <div class="indexSubmitNewTaskButton indexSubmitButton button">Submit</div>
        </div>
    </form>
</div>
</div>

<script>
    // Make same lesson cells hover the same:
    const cells = document.querySelectorAll(".unitBlock");
    cells.forEach(cell => {
        cell.addEventListener('mouseover', () => {
            const sameUnitCells = document.querySelectorAll(`[unit_id="${cell.getAttribute('unit_id')}"]`);
            for (const sameUnitCell of sameUnitCells) {
                sameUnitCell.style.opacity = 0.8;
                sameUnitCell.style.transform = 'scale(1.04)';
            }
        })
        cell.addEventListener('mouseout', function() {
            const sameUnitCells = document.querySelectorAll(`[unit_id="${cell.getAttribute('unit_id')}"]`);
            for (const sameUnitCell of sameUnitCells) {
                sameUnitCell.style.opacity = 1;
                sameUnitCell.style.transform = 'scale(1)';
            }
        });
    });


    // Onclick for new lesson/task dropdown buttons:
    const newLessonDropdownButton = document.getElementsByClassName('indexNewLessonFormDropdownButton')[0];
    const newTaskDropdownButton = document.getElementsByClassName('indexNewTaskFormDropdownButton')[0];

    let currentTimings = [];

    newLessonDropdownButton.addEventListener('click', () => {
        const newLessonForm = document.getElementById('indexNewLessonForm');
        if (newLessonForm.offsetHeight == '0') {
            var height = newLessonForm.scrollHeight;
            newLessonForm.style.height = height + "px";
            newLessonForm.style.paddingBottom = "5px";
        } else {
            newLessonForm.style.height = '0px';
            newLessonForm.style.paddingBottom = "0px";
        }
    });

    newTaskDropdownButton.addEventListener('click', () => {
        const newTaskForm = document.getElementById('indexNewTaskForm');
        if (newTaskForm.offsetHeight == '0') {
            var height = newTaskForm.scrollHeight;
            newTaskForm.style.height = height + "px";
        } else {
            newTaskForm.style.height = '0px';
        }
    })

    // Onclick for cancel buttons:
    const newLessonCancelButton = document.getElementsByClassName('indexCancelNewLessonButton')[0];
    const newTaskCancelButton = document.getElementsByClassName('indexCancelNewTaskButton')[0];

    newLessonCancelButton.addEventListener('click', () => {
        const newLessonForm = document.getElementById('indexNewLessonForm');
        newLessonForm.style.height = "0px";
        newLessonForm.style.paddingBottom = "0px";
    })

    newTaskCancelButton.addEventListener('click', () => {
        const newTaskForm = document.getElementById('indexNewTaskForm');
        newTaskForm.style.height = '0px';
    })

    // Onclick for submit buttons:
    // New Lesson:
    const newLessonSubmitButton = document.getElementsByClassName('indexSubmitNewLessonButton')[0];
    newLessonSubmitButton.addEventListener('click', () => {
        const newTimings = currentTimings.map(timing => {
            delete timing.index;
            return timing;
        });
        const requestBody = {
            'title': document.getElementById('title').value,
            'colour': document.getElementById('colour').value,
            'timings': newTimings
        }
        console.log("REQUEST BODY!");
        console.log(requestBody);
        fetch('/timetable', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestBody)
        })
        .then(res => {
            window.location.href = '/timetable/week/today';
        }).catch(err => {
            alert("There was something wrong adding your lesson!");
            console.log(err);
        })
    })

    //New Task:
    const newTaskSubmitButton = document.getElementsByClassName('indexSubmitNewTaskButton')[0];
    newTaskSubmitButton.addEventListener('click', () => {
        // TO BE IMPLEMENTED!
    })

    // Timings:
    let currentIndex = 0;

    function handleDayChange(daySelect) {
        const startSelect = document.getElementById("timingStart");
        const endSelect = document.getElementById("timingEnd");

        startSelect.disabled = false;

        if (daySelect.selectedIndex === 0) {
            startSelect.selectedIndex = 0;
            startSelect.disabled = true;
            endSelect.selectedIndex = 0;
            endSelect.disabled = true;
        } else {
            endSelect.disabled = true;
        }
    }

    function handleStartChange(startSelect) {
        const endSelect = document.getElementById("timingEnd");
        const daySelect = document.getElementById("day");

        endSelect.disabled = false;

        if (startSelect.selectedIndex === 0) {
                endSelect.selectedIndex = 0;
                endSelect.disabled = true;
        } else {
            if (daySelect.selectedIndex === 0) {
                endSelect.selectedIndex = 0;
                endSelect.disabled = true;
            }
        }
    }

    let timingCount = 0;
    function handleEndChange(endSelect) {
        if (endSelect.selectedIndex === 0) {
            return;
        }

        const daySelect = document.getElementById("day");
        const startSelect = document.getElementById("timingStart");
        const selectedDay = daySelect.options[daySelect.selectedIndex].value;
        const selectedStart = startSelect.options[startSelect.selectedIndex].value;
        const selectedEnd = endSelect.options[endSelect.selectedIndex].value;

        const units = JSON.parse('<%- unitsString %>');

        // Check overlap with existing units:
        if (units.some(unit => unit.timings.some(timing => timing.day == selectedDay && timing.timingStart < selectedEnd && timing.timingEnd > selectedStart))) {
            alert("This timing overlaps with the timing of an existing lesson/task!");
            daySelect.selectedIndex = 0;
            startSelect.selectedIndex = 0;
            endSelect.selectedIndex = 0;
            startSelect.disabled = true;
            endSelect.disabled = true;
            return;
        }

        // Check overlap with current unit:
        if (currentTimings.some(timing => timing.day == selectedDay && timing.timingStart < selectedEnd && timing.timingEnd > selectedStart)) {
            alert("This timing overlaps with the timing of the current new lesson!");
            daySelect.selectedIndex = 0;
            startSelect.selectedIndex = 0;
            endSelect.selectedIndex = 0;
            startSelect.disabled = true;
            endSelect.disabled = true;
            return;
        }

        // Check start > end:
        if (selectedStart >= selectedEnd) {
            alert('Starting time should be later than Ending time!');
            return;
        }

        // Display the selected values above the indexInputRow
        const selectedRows = document.getElementById('selectedRows');
        const newRow = document.createElement('div');
        newRow.innerText = `${selectedDay}, ${selectedStart} - ${selectedEnd}`;
        newRow.className = 'indexNewLessonTimingRow';

        // Create delete button
        const deleteButton = document.createElement('button');
        deleteButton.setAttribute('timing-index', timingCount);
        deleteButton.innerText = 'Delete';
        deleteButton.className = 'indexNewLessonTimingDeleteButton';
        deleteButton.addEventListener('click', (event) => {
            const newLessonForm = document.getElementById('indexNewLessonForm');
            const timingRows = document.getElementsByClassName('indexNewLessonTimingRow');
            const timingRowHeight = timingRows[0].scrollHeight
            var formHeight = newLessonForm.scrollHeight;
            newLessonForm.style.height = formHeight - timingRowHeight + "px";
            if (timingRows.length == 1) {
                newLessonForm.style.paddingBottom = "0px";
            }
            selectedRows.removeChild(newRow);
            currentTimings = currentTimings.filter(timing => timing.index != event.target.getAttribute('timing-index'), 1);
            timingCount--;
            console.log(currentTimings);
        });
        newRow.appendChild(deleteButton);

        selectedRows.appendChild(newRow);

        currentTimings.push({
            'index': timingCount,
            'day': selectedDay,
            'timingStart': selectedStart,
            'timingEnd': selectedEnd
        })
        timingCount++;

        // Expand for height:
        const newLessonForm = document.getElementById('indexNewLessonForm');
        var height = newLessonForm.scrollHeight;
        newLessonForm.style.height = height + "px";
        newLessonForm.style.paddingBottom = "5px";

        // Reset the form for the next selection
        currentIndex++;
        daySelect.selectedIndex = 0;
        startSelect.selectedIndex = 0;
        endSelect.selectedIndex = 0;
        startSelect.disabled = true;
        endSelect.disabled = true;
    }

    // Onclick for arrow buttons:
    const weekOrMonth = "<%= weekOrMonth %>";
    const period = "<%= formattedPeriod %>";

    const leftArrowButton = document.getElementsByClassName('timetableLeftArrow')[0];
    const rightArrowButton = document.getElementsByClassName('timetableRightArrow')[0];

    function getPreviousWeek(dateRange) {
        const parts = dateRange.split(" - ");
        const startDate = new Date(parts[0]);
        const endDate = new Date(parts[1]);

        const previousWeekStartDate = new Date(startDate);
        previousWeekStartDate.setDate(startDate.getDate() - 7);
        const previousWeekEndDate = new Date(endDate);
        previousWeekEndDate.setDate(endDate.getDate() - 7);

        return (
            previousWeekStartDate.toLocaleDateString("en", {
            month: "long",
            day: "numeric",
            year: "numeric",
            }) +
            " - " +
            previousWeekEndDate.toLocaleDateString("en", {
            month: "long",
            day: "numeric",
            year: "numeric",
            })
        );
        }

    function getNextWeek(dateRange) {
        const parts = dateRange.split(" - ");
        const startDate = new Date(parts[0]);
        const endDate = new Date(parts[1]);

        const nextWeekStartDate = new Date(startDate);
        nextWeekStartDate.setDate(startDate.getDate() + 7);
        const nextWeekEndDate = new Date(endDate);
        nextWeekEndDate.setDate(endDate.getDate() + 7);

        return (
            nextWeekStartDate.toLocaleDateString("en", {
            month: "long",
            day: "numeric",
            year: "numeric",
            }) +
            " - " +
            nextWeekEndDate.toLocaleDateString("en", {
            month: "long",
            day: "numeric",
            year: "numeric",
            })
        );
    }

    function getNextMonth(currentMonth) {
        const currentDate = new Date(`1 ${currentMonth}`);
        currentDate.setMonth(currentDate.getMonth() + 1);
        return currentDate.toLocaleString('default', { month: 'long' });
    }

    function getPreviousMonth(currentMonth) {
        const currentDate = new Date(`1 ${currentMonth}`);
        currentDate.setMonth(currentDate.getMonth() - 1);
        return currentDate.toLocaleString('default', { month: 'long' });
    }

    let previousPeriod = "";
    let nextPeriod = "";
    if (weekOrMonth == 'week') {
        nextPeriod = getNextWeek(period);
        previousPeriod = getPreviousWeek(period);
    } else {
        nextPeriod = getNextMonth(period);
        previousPeriod = getPreviousMonth(period);
    }

    leftArrowButton.addEventListener('click', () => {
        window.location.href = `/timetable/${weekOrMonth}/${previousPeriod}`;
    })
    rightArrowButton.addEventListener('click', () => {
        window.location.href = `/timetable/${weekOrMonth}/${nextPeriod}`;
    })

</script>

