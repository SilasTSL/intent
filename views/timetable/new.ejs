<% layout('layouts/boilerplate')%>
<div class="rows">
    <h1 class="text-center mt-5">New Lesson</h1>
    <div class="col-6 offset-3">
        <div class="mb-3">
            <label class="form-label" for="title">Title</label>
            <input class="form-control" type="text" id="title" name="lesson[title]" required>
            <div class="valid-feedback">Looks good!</div>
        </div>
        <div class="mb-4">
            <label class="form-label" for="colour">Colour</label>
            <select class="form-select" id="colour" name="lesson[colour]" required>
                <option value="" selected disabled>Select a colour</option>
                <option value="#C62828">Red</option>
                <option value="#1565C0">Blue</option>
                <option value="#2E7D32">Green</option>
                <option value="#FFA000">Yellow</option>
                <option value="#6A1B9A">Purple</option>
                <option value="#f08731">Orange</option>
            </select>
            <div class="valid-feedback">Looks good!</div>
        </div>
        <div id="timingContainer" class="mb-3" style="display: flex; flex-direction: column; align-items: center; border: 0.5px solid black; border-radius: 10px; padding: 2rem; width: 100%;">
            <div class="mb-3">
                <label class="form-label" for="day">Day</label>
                <select class="form-select" id="day" name="lesson[day]" required>
                    <option value="" selected disabled>Select a day</option>
                    <option value="Monday">Monday</option>
                    <option value="Tuesday">Tuesday</option>
                    <option value="Wednesday">Wednesday</option>
                    <option value="Thursday">Thursday</option>
                    <option value="Friday">Friday</option>
                </select>
                <div class="valid-feedback">Looks good!</div>
            </div>
            <div id="newTimingRow" style="display: flex; flex-direction: row; width: 100%;">
                <label class="form-label px-4" for="timing" style="font-size: 0.9rem;">Timing Start</label>
                <select class="form-select" id="timingStart" name="lesson[timingStart]" required>
                    <option value="" selected disabled>Select a start time</option>
                    <option value="0800">08:00</option>
                    <option value="0900">09:00</option>
                    <option value="1000">10:00</option>
                    <option value="1100">11:00</option>
                    <option value="1200">12:00</option>
                    <option value="1300">13:00</option>
                    <option value="1400">14:00</option>
                    <option value="1500">15:00</option>
                    <option value="1600">16:00</option>
                    <option value="1700">17:00</option>
                </select>
                <div class="valid-feedback">Looks good!</div>
                <label class="form-label px-4" for="timing" style="font-size: 0.9rem;">Timing End</label>
                <select class="form-select" id="timingEnd" name="lesson[timingEnd]" required>
                    <option value="" selected disabled>Select an end time</option>
                    <option value="0900">09:00</option>
                    <option value="1000">10:00</option>
                    <option value="1100">11:00</option>
                    <option value="1200">12:00</option>
                    <option value="1300">13:00</option>
                    <option value="1400">14:00</option>
                    <option value="1500">15:00</option>
                    <option value="1600">16:00</option>
                    <option value="1700">17:00</option>
                </select>
                <div class="valid-feedback">Looks good!</div>
                <button id="addTimingButton" class="btn btn-success" style="margin-left: 2rem; font-size: 0.8rem;">Add Timing</button>
            </div>
        </div>

        <div class="d-flex flex-row justify-content-between mt-5">
            <button id="addLessonsButton" class="btn btn-success">Add Lesson</button>
            <a class="btn btn-danger" href="/timetable">Back</a>
        </div>
    </div>
</div>
<script>
    var addedTimings = [];
    // Get the timingContainer element
    const timingContainer = document.getElementById('timingContainer');
    // Get the timingStart and timingEnd input elements
    const timingStartInput = document.getElementById('timingStart');
    const timingEndInput = document.getElementById('timingEnd');

    // Function to add timing and lesson
    function addTiming() {
        // Get the selected start and end times
        const timingStart = timingStartInput.value;
        const timingEnd = timingEndInput.value;

        // Check that the end time is greater than the start time
        if (timingEnd <= timingStart) {
            alert('End time must be greater than start time');
            return;
        }

        // Check that there's a day inputted
        let dayInput = document.getElementById('day').value;
        if (!dayInput) {
            alert("Input a day!");
            return;
        }


        // Check for time overlap with existing lessons
        const overlap = addedTimings.some(timing => {
            const existingStart = timing.timingStart;
            const existingEnd = timing.timingEnd;
            return (((timingStart >= existingStart && timingStart < existingEnd) ||
                    (timingEnd > existingStart && timingEnd <= existingEnd) ||
                    (timingStart <= existingStart && timingEnd >= existingEnd)) && timing.day == dayInput);
        });

        if (overlap) {
            alert('The selected time overlaps with an existing lesson');
            return;
        }

        // Create a new div element for the timing and append it to the timingContainer
        const newTimingDiv = document.createElement('div');
        newTimingDiv.style = "display: flex; flex-direction: row; justify-content: space-between; width: 95%; align-items: center; margin-top: 1.5rem;";
        newTimingDiv.innerHTML = `<div>${timingStartInput.value} - ${timingEndInput.value} on ${dayInput}</div><button class="btn btn-danger">Delete</button></div>`;
        timingContainer.appendChild(newTimingDiv);

        // Create new timing for current lesson:
        const newTiming = {
            day: document.getElementById('day').value,
            timingStart: timingStartInput.value,
            timingEnd: timingEndInput.value
        }
        addedTimings.push(newTiming);

        // Add onclick event listener to the delete button
        const deleteButton = newTimingDiv.querySelector(".btn-danger");
        deleteButton.onclick = function () {
            // Remove the newTimingDiv element from the DOM
            newTimingDiv.remove();

            // Remove the corresponding newTiming object from the addedTimings array
            const index = addedTimings.findIndex(
            (timing) =>
                timing.timingStart === newTiming.timingStart &&
                timing.timingEnd === newTiming.timingEnd &&
                timing.day === newTiming.day
            );
            addedTimings.splice(index, 1);
        };
    }

    // Function to add lessons
    function addLessons() {

        if (addedTimings.length === 0) {
            alert('Please add at least one timing');
            return;
        }

        // Create a new Lesson object with current timings
        const newLesson = {
            title: document.getElementById('title').value,
            type: document.getElementById('day').value,
            colour: document.getElementById('colour').value,
            timings: addedTimings
        };

        // Function to serialize nested objects and arrays
        function serializeData(obj, prefix = '') {
            const formData = [];
            for (const key in obj) {
                if (obj.hasOwnProperty(key)) {
                const fullKey = prefix ? `${prefix}[${key}]` : key;
                const value = obj[key];
                if (typeof value === 'object' && !Array.isArray(value)) {
                    formData.push(...serializeData(value, fullKey));
                } else if (Array.isArray(value)) {
                    value.forEach((item, index) => {
                    formData.push(...serializeData(item, `${fullKey}[${index}]`));
                    });
                } else {
                    formData.push(`${encodeURIComponent(fullKey)}=${encodeURIComponent(value)}`);
                }
                }
            }
            return formData;
        }
        const formData = serializeData(newLesson).join("&");

        fetch('/timetable', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: formData
        })
        .then(response => {
            if (response.ok) {
                // Redirect to the timetable page if the request is successful
                window.location.href = "/timetable";
            } else {
                console.log(response);
                throw new Error('Failed to add lessons');
            }
        })
        .catch(error => {
            console.error(error);
            alert('Failed to add lessons');
        });
    }

    // Add event listener for the Add Timing button
    const addTimingButton = document.getElementById('addTimingButton');
    addTimingButton.addEventListener('click', addTiming);

    // Add event listener for the Add Timing button
    const addLessonsButton = document.getElementById('addLessonsButton');
    addLessonsButton.addEventListener('click', addLessons);
</script>